import streamlit as st
import pandas as pd
import os

st.set_page_config(page_title="Chicago Bears 2025–26 Weekly Tracker", layout="wide")
st.title("🐻 Chicago Bears 2025–26 Weekly Tracker")
st.markdown("Track weekly stats, strategy, personnel usage, and league comparisons.")

EXCEL_FILE = "bears_weekly_analytics.xlsx"

# Append new data to Excel workbook
def append_to_excel(new_data, sheet_name, file_name=EXCEL_FILE, deduplicate=True):
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows

    if os.path.exists(file_name):
        book = openpyxl.load_workbook(file_name)
        if sheet_name in book.sheetnames:
            sheet = book[sheet_name]
            existing_data = pd.DataFrame(sheet.values)
            existing_data.columns = existing_data.iloc[0]
            existing_data = existing_data[1:]

            if deduplicate and "Week" in existing_data.columns and "Week" in new_data.columns:
                existing_data = existing_data[existing_data["Week"] != str(new_data.iloc[0]["Week"])]
            combined_data = pd.concat([existing_data, new_data], ignore_index=True)
        else:
            combined_data = new_data
    else:
        book = openpyxl.Workbook()
        book.remove(book.active)
        combined_data = new_data

    if sheet_name in book.sheetnames:
        del book[sheet_name]
    sheet = book.create_sheet(sheet_name)

    for r in dataframe_to_rows(combined_data, index=False, header=True):
        sheet.append(r)

    book.save(file_name)

# Upload section
st.sidebar.header("📤 Upload New Weekly Data")
uploaded_offense = st.sidebar.file_uploader("Upload Offensive Analytics (.csv)", type="csv")
uploaded_defense = st.sidebar.file_uploader("Upload Defensive Analytics (.csv)", type="csv")
uploaded_strategy = st.sidebar.file_uploader("Upload Weekly Strategy (.csv)", type="csv")
uploaded_personnel = st.sidebar.file_uploader("Upload Personnel Usage (.csv)", type="csv")

if uploaded_offense:
    df_offense = pd.read_csv(uploaded_offense)
    append_to_excel(df_offense, "Offense")
    st.sidebar.success("✅ Offensive data uploaded and added.")

if uploaded_defense:
    df_defense = pd.read_csv(uploaded_defense)
    append_to_excel(df_defense, "Defense")
    st.sidebar.success("✅ Defensive data uploaded and added.")

if uploaded_strategy:
    df_strategy = pd.read_csv(uploaded_strategy)
    append_to_excel(df_strategy, "Strategy")
    st.sidebar.success("✅ Strategy data uploaded and added.")

if uploaded_personnel:
    df_personnel = pd.read_csv(uploaded_personnel)
    append_to_excel(df_personnel, "Personnel")
    st.sidebar.success("✅ Personnel data uploaded and added.")

# Download full Excel data
if os.path.exists(EXCEL_FILE):
    with open(EXCEL_FILE, "rb") as f:
        st.sidebar.download_button(
            label="⬇️ Download All Data (Excel)",
            data=f,
            file_name=EXCEL_FILE,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# Preview uploaded data
if uploaded_offense:
    st.subheader("Offensive Analytics")
    st.dataframe(df_offense)

if uploaded_defense:
    st.subheader("Defensive Analytics")
    st.dataframe(df_defense)

if uploaded_strategy:
    st.subheader("Weekly Strategy")
    st.dataframe(df_strategy)

if uploaded_personnel:
    st.subheader("Personnel Usage")
    st.dataframe(df_personnel)

# Add & view media summaries
st.markdown("### 📰 Weekly Beat Writer / ESPN Summary")

with st.form("media_form"):
    media_week = st.number_input("Week", min_value=1, max_value=25, step=1, key="media_week_input")
    media_opponent = st.text_input("Opponent")
    media_summary = st.text_area("Beat Writer & ESPN Summary (Game Recap, Analysis, Strategy, etc.)")
    submit_media = st.form_submit_button("Save Summary")

if submit_media:
    media_df = pd.DataFrame([{
        "Week": media_week,
        "Opponent": media_opponent,
        "Summary": media_summary
    }])
    append_to_excel(media_df, "Media_Summaries", deduplicate=False)
    st.success(f"✅ Summary for Week {media_week} vs {media_opponent} saved.")

# Preview stored media summaries
if os.path.exists(EXCEL_FILE):
    try:
        df_media = pd.read_excel(EXCEL_FILE, sheet_name="Media_Summaries")
        st.subheader("📰 Saved Media Summaries")
        st.dataframe(df_media)
    except:
        st.info("No media summaries stored yet.")

# 🔮 Weekly Game Prediction
st.markdown("### 🔮 Weekly Game Prediction")

# Let user choose which week to predict
week_to_predict = st.number_input("Select Week to Predict", min_value=1, max_value=25, step=1, key="predict_week_input")

# Load uploaded strategy and analytics
try:
    df_strategy = pd.read_excel(EXCEL_FILE, sheet_name="Strategy")
    df_offense = pd.read_excel(EXCEL_FILE, sheet_name="Offense")
    df_defense = pd.read_excel(EXCEL_FILE, sheet_name="Defense")

    row_s = df_strategy[df_strategy["Week"] == week_to_predict]
    row_o = df_offense[df_offense["Week"] == week_to_predict]
    row_d = df_defense[df_defense["Week"] == week_to_predict]

    if not row_s.empty and not row_o.empty and not row_d.empty:
        strategy_text = row_s.iloc[0].astype(str).str.cat(sep=" ").lower()

        # Pull a few numeric fields if they exist
        try:
            ypa = float(row_o.iloc[0].get("YPA", 0))
            red_zone_allowed = float(row_d.iloc[0].get("RZ% Allowed", 0))
            sacks = int(row_d.iloc[0].get("SACK", 0))
        except:
            ypa = red_zone_allowed = sacks = 0

        # Simple rules for prediction
        if "blitz" in strategy_text and sacks >= 3:
            prediction = "Win – pressure defense likely disrupts opponent"
        elif ypa < 6 and red_zone_allowed > 65:
            prediction = "Loss – inefficient passing and weak red zone defense"
        elif "zone" in strategy_text and red_zone_allowed < 50:
            prediction = "Win – disciplined zone and red zone efficiency"
        else:
            prediction = "Loss – no clear advantage in key strategy or stats"

        st.success(f"**Predicted Outcome for Week {week_to_predict}: {prediction}**")

    else:
        st.info("Please upload Strategy, Offense, and Defense data for this week.")

except Exception as e:
    st.warning("Prediction could not be generated. Make sure all files are uploaded with a 'Week' column.")








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        del book[sheet_name]
    sheet = book.create_sheet(sheet_name)

    for r in dataframe_to_rows(combined_data, index=False, header=True):
        sheet.append(r)

    book.save(file_name)

# Upload section
st.sidebar.header("📤 Upload New Weekly Data")
uploaded_offense = st.sidebar.file_uploader("Upload Offensive Analytics (.csv)", type="csv")
uploaded_defense = st.sidebar.file_uploader("Upload Defensive Analytics (.csv)", type="csv")
uploaded_strategy = st.sidebar.file_uploader("Upload Weekly Strategy (.csv)", type="csv")
uploaded_personnel = st.sidebar.file_uploader("Upload Personnel Usage (.csv)", type="csv")

if uploaded_offense:
    df_offense = pd.read_csv(uploaded_offense)
    append_to_excel(df_offense, "Offense")
    st.sidebar.success("✅ Offensive data uploaded and added.")

if uploaded_defense:
    df_defense = pd.read_csv(uploaded_defense)
    append_to_excel(df_defense, "Defense")
    st.sidebar.success("✅ Defensive data uploaded and added.")

if uploaded_strategy:
    df_strategy = pd.read_csv(uploaded_strategy)
    append_to_excel(df_strategy, "Strategy")
    st.sidebar.success("✅ Strategy data uploaded and added.")

if uploaded_personnel:
    df_personnel = pd.read_csv(uploaded_personnel)
    append_to_excel(df_personnel, "Personnel")
    st.sidebar.success("✅ Personnel data uploaded and added.")

# Download section
if os.path.exists(EXCEL_FILE):
    with open(EXCEL_FILE, "rb") as f:
        st.sidebar.download_button(
            label="⬇️ Download All Data (Excel)",
            data=f,
            file_name=EXCEL_FILE,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# Optional preview

if uploaded_offense:
    st.subheader("Offensive Analytics")
    st.dataframe(df_offense)

if uploaded_defense:
    st.subheader("Defensive Analytics")
    st.dataframe(df_defense)

if uploaded_strategy:
    st.subheader("Weekly Strategy")
    st.dataframe(df_strategy)

if uploaded_personnel:
    st.subheader("Personnel Usage")
    st.dataframe(df_personnel)
st.markdown("### 📰 Weekly Beat Writer / ESPN Summary")

with st.form("media_form"):
    media_week = st.number_input("Week", min_value=1, max_value=25, step=1)
    media_opponent = st.text_input("Opponent")
    media_summary = st.text_area("Beat Writer & ESPN Summary (Game Recap, Analysis, Strategy, etc.)")

    submit_media = st.form_submit_button("Save Summary")
import streamlit as st
import pandas as pd
import os

st.set_page_config(page_title="Chicago Bears 2025–26 Weekly Tracker", layout="wide")
st.title("🐻 Chicago Bears 2025–26 Weekly Tracker")
st.markdown("Track weekly stats, strategy, personnel usage, and league comparisons.")

EXCEL_FILE = "bears_weekly_analytics.xlsx"

# Append new data to Excel workbook
def append_to_excel(new_data, sheet_name, file_name="bears_weekly_analytics.xlsx"):
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows

    # Load existing Excel file or create new one
    if os.path.exists(file_name):
        book = openpyxl.load_workbook(file_name)
        if sheet_name in book.sheetnames:
            sheet = book[sheet_name]
            # Read existing data into DataFrame
            existing_data = pd.DataFrame(sheet.values)
            existing_data.columns = existing_data.iloc[0]
            existing_data = existing_data[1:]

            # Drop duplicate week if it exists
            week_col = "Week"
            existing_data = existing_data[existing_data[week_col] != str(new_data.iloc[0][week_col])]

            # Combine and overwrite
            combined_data = pd.concat([existing_data, new_data], ignore_index=True)
        else:
            combined_data = new_data
    else:
        book = openpyxl.Workbook()
        book.remove(book.active)
        combined_data = new_data

    # Overwrite or add the updated sheet
    if sheet_name in book.sheetnames:
        del book[sheet_name]
    sheet = book.create_sheet(sheet_name)

    for r in dataframe_to_rows(combined_data, index=False, header=True):
        sheet.append(r)

    book.save(file_name)

# Upload section
st.sidebar.header("📤 Upload New Weekly Data")
uploaded_offense = st.sidebar.file_uploader("Upload Offensive Analytics (.csv)", type="csv")
uploaded_defense = st.sidebar.file_uploader("Upload Defensive Analytics (.csv)", type="csv")
uploaded_strategy = st.sidebar.file_uploader("Upload Weekly Strategy (.csv)", type="csv")
uploaded_personnel = st.sidebar.file_uploader("Upload Personnel Usage (.csv)", type="csv")

if uploaded_offense:
    df_offense = pd.read_csv(uploaded_offense)
    append_to_excel(df_offense, "Offense")
    st.sidebar.success("✅ Offensive data uploaded and added.")

if uploaded_defense:
    df_defense = pd.read_csv(uploaded_defense)
    append_to_excel(df_defense, "Defense")
    st.sidebar.success("✅ Defensive data uploaded and added.")

if uploaded_strategy:
    df_strategy = pd.read_csv(uploaded_strategy)
    append_to_excel(df_strategy, "Strategy")
    st.sidebar.success("✅ Strategy data uploaded and added.")

if uploaded_personnel:
    df_personnel = pd.read_csv(uploaded_personnel)
    append_to_excel(df_personnel, "Personnel")
    st.sidebar.success("✅ Personnel data uploaded and added.")

# Download section
if os.path.exists(EXCEL_FILE):
    with open(EXCEL_FILE, "rb") as f:
        st.sidebar.download_button(
            label="⬇️ Download All Data (Excel)",
            data=f,
            file_name=EXCEL_FILE,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# Optional preview

if uploaded_offense:
    st.subheader("Offensive Analytics")
    st.dataframe(df_offense)

if uploaded_defense:
    st.subheader("Defensive Analytics")
    st.dataframe(df_defense)

if uploaded_strategy:
    st.subheader("Weekly Strategy")
    st.dataframe(df_strategy)

if uploaded_personnel:
    st.subheader("Personnel Usage")
    st.dataframe(df_personnel)
st.markdown("### 📰 Weekly Beat Writer / ESPN Summary")

with st.form("media_form"):
    media_week = st.number_input("Week", min_value=1, max_value=25, step=1)
    media_opponent = st.text_input("Opponent")
    media_summary = st.text_area("Beat Writer & ESPN Summary (Game Recap, Analysis, Strategy, etc.)")

    submit_media = st.form_submit_button("Save Summary")
if submit_media:
    import openpyxl
    from openpyxl.utils.dataframe import dataframe_to_rows

    media_path = EXCEL_FILE

    # Load existing summaries
    if os.path.exists(media_path):
        try:
            media_df = pd.read_excel(media_path, sheet_name="Media")
        except:
            media_df = pd.DataFrame(columns=["Week", "Opponent", "Summary"])
    else:
        media_df = pd.DataFrame(columns=["Week", "Opponent", "Summary"])

    # Create new summary entry
    new_entry = pd.DataFrame([{
        "Week": media_week,
        "Opponent": media_opponent,
        "Summary": media_summary
    }])

    # Remove existing summary for same Week and Opponent
    media_df = media_df[
        ~((media_df["Week"] == media_week) & (media_df["Opponent"] == media_opponent))
    ]

    # Append and deduplicate (extra safety)
    combined_df = pd.concat([media_df, new_entry], ignore_index=True)
    combined_df = combined_df.drop_duplicates(subset=["Week", "Opponent"], keep="last")

    # Save to Excel by replacing Media sheet
    if os.path.exists(media_path):
        book = openpyxl.load_workbook(media_path)
    else:
        book = openpyxl.Workbook()
        book.remove(book.active)

    if "Media" in book.sheetnames:
        del book["Media"]
    sheet = book.create_sheet("Media")

    for r in dataframe_to_rows(combined_df, index=False, header=True):
        sheet.append(r)

    book.save(media_path)
    st.success(f"✅ Summary for Week {media_week} vs {media_opponent} saved (no duplicates).")
    if os.path.exists(media_path):
        try:
            media_df = pd.read_excel(media_path, sheet_name="Media")
        except:
            media_df = pd.DataFrame(columns=["Week", "Opponent", "Summary"])
    else:
        media_df = pd.DataFrame(columns=["Week", "Opponent", "Summary"])

    # Create new summary entry
    new_entry = pd.DataFrame([{
        "Week": media_week,
        "Opponent": media_opponent,
        "Summary": media_summary
    }])

    # Remove existing summary for same Week and Opponent
    media_df = media_df[
        ~((media_df["Week"] == media_week) & (media_df["Opponent"] == media_opponent))
    ]

    # Append and deduplicate (extra safety)
    combined_df = pd.concat([media_df, new_entry], ignore_index=True)
    combined_df = combined_df.drop_duplicates(subset=["Week", "Opponent"], keep="last")

    # Save to Excel by replacing Media sheet
    if os.path.exists(media_path):
        book = openpyxl.load_workbook(media_path)
    else:
        book = openpyxl.Workbook()
        book.remove(book.active)

    if "Media" in book.sheetnames:
        del book["Media"]
    sheet = book.create_sheet("Media")

    for r in dataframe_to_rows(combined_df, index=False, header=True):
        sheet.append(r)

    book.save(media_path)
    st.success(f"✅ Summary for Week {media_week} vs {media_opponent} saved (no duplicates).")
# 🧠 Predictive Strategy-Based Outcome (Prototype)

st.markdown("### 🔮 Predicted Outcome for Next Game (Experimental)")

try:
    strategy_df = pd.read_excel(EXCEL_FILE, sheet_name="Strategy")
    latest_week = strategy_df["Week"].max()
    latest_data = strategy_df[strategy_df["Week"] == latest_week]

    # Example: Use a simple keyword-based score from Key_Notes
    def basic_prediction(notes):
        text = notes.lower()
        if "dominant" in text or "strong pass rush" in text:
            return "Win"
        elif "struggled", "injuries", "turnovers" in text:
            return "Loss"
        else:
            return "Too close to call"

    prediction = basic_prediction(" ".join(latest_data["Key_Notes"].astype(str)))

    st.subheader(f"🔍 Predicted outcome for Week {latest_week + 1}: **{prediction}**")

except Exception as e:
    st.info("Strategy data not available or incomplete for prediction.")

    else:
        book = openpyxl.Workbook()
        book.remove(book.active)

    if "Media" in book.sheetnames:
        del book["Media"]
    sheet = book.create_sheet("Media")

    for r in dataframe_to_rows(combined_df, index=False, header=True):
        sheet.append(r)

    book.save(media_path)
    st.success(f"✅ Summary for Week {media_week} vs {media_opponent} saved (no duplicates).")
# 🧠 Predictive Strategy-Based Outcome (Prototype)

st.markdown("### 🔮 Predicted Outcome for Next Game (Experimental)")

try:
    strategy_df = pd.read_excel(EXCEL_FILE, sheet_name="Strategy")
    latest_week = strategy_df["Week"].max()
    latest_data = strategy_df[strategy_df["Week"] == latest_week]

    # Example: Use a simple keyword-based score from Key_Notes
    def basic_prediction(notes):
        text = notes.lower()
        if "dominant" in text or "strong pass rush" in text:
            return "Win"
        elif "struggled", "injuries", "turnovers" in text:
            return "Loss"
        else:
            return "Too close to call"

    prediction = basic_prediction(" ".join(latest_data["Key_Notes"].astype(str)))

    st.subheader(f"🔍 Predicted outcome for Week {latest_week + 1}: **{prediction}**")

except Exception as e:
    st.info("Strategy data not available or incomplete for prediction.")

